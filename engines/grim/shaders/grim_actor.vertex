struct Light {
	vec4 _position;
	vec4 _direction;
	vec4 _color;
	vec4 _params;
};

struct shadow_info {
	bool _active;
	vec3 _color;
	vec3 _light;
	vec3 _point;
	vec3 _normal;
};

const int maxLights = 8;
const float DIFFUSE_FACTOR = 0.8;

in vec3 position;
in vec2 texcoord;
in vec4 color;
in vec3 normal;

uniform highp mat4 modelMatrix;
uniform highp mat4 viewMatrix;
uniform highp mat4 projMatrix;
uniform highp mat4 extraMatrix;
uniform highp vec2 texScale;
uniform bool textured;
uniform Light lights[maxLights];
uniform shadow_info shadow;
uniform bool lightsEnabled;
uniform bool hasAmbient;

out vec2 Texcoord;
out vec4 Color;

void main()
{
	vec4 pos = vec4(position, 1.0);

	pos = modelMatrix *
	      extraMatrix *
	      pos;

	// See http://en.wikipedia.org/wiki/Line-plane_intersection
	if (shadow._active) {
		pos /= pos.w;
		vec3 l = pos.xyz - shadow._light;
		float d = dot(shadow._point - shadow._light, shadow._normal) / dot(l, shadow._normal);
		vec3 p = shadow._light + d * l;
		pos = vec4(p, 1.0);
	}

	gl_Position = projMatrix * viewMatrix * pos;

	if (textured) {
		Texcoord = vec2(0.0, 1.0) + (texcoord / texScale);
	} else {
		Texcoord = vec2(0.0, 0.0);
	}

	Color = color;

	if (shadow._active) {
		Color = vec4(shadow._color, 1.0);
	} else if (lightsEnabled) {
		vec3 light = vec3(0.0, 0.0, 0.0);
		vec3 normalEye = normalize((viewMatrix * modelMatrix * extraMatrix * vec4(normal, 0.0))).xyz;

		for (int i = 0; i < maxLights; ++i) {
			if (lights[i]._color.w != 0.0) {
				vec3 color = lights[i]._color.xyz;
				if (lights[i]._position.w == 1.0) {
					vec3 vertexToLight = lights[i]._position.xyz - pos.xyz;
					float falloffNear = 0.0;
					float falloffFar = 0.0;
					float dist = length(vertexToLight);

					float attn = clamp(1.0 - (dist - falloffNear) / max(0.001, falloffFar - falloffNear), 0.0, 1.0);
					color *= attn;

					if (lights[i]._direction.w != -1.0) { // Spotlight
						float cosAngle = max(0.0, dot(lights[i]._direction.xyz, vertexToLight));
						float cosPenumbra = lights[i]._params.z;
						float cosUmbra = lights[i]._params.w;
						float cone = clamp((cosAngle - cosPenumbra) / max(0.001, cosUmbra - cosPenumbra), 0.0, 1.0);
						color *= cone;
					}
					vertexToLight = normalize(vertexToLight);
					float incidence = max(0.0, dot(normalEye, vertexToLight));
					color *= incidence;
				} else if (lights[i]._direction.w == -1.0) { // Ambient or directional
					if (lights[i]._position.w != -1.0) { // Directional
						float incidence = max(0.0, dot(normalEye, -lights[i]._position.xyz));
						color *= incidence;
					}
				}
				light += color;
			}
		}

		if (!hasAmbient)
			light += vec3(0.5, 0.5, 0.5);
		light /= max(1.0, max(max(light.x, light.y), light.z));
		Color *= vec4(light, 1.0);
	}
}
